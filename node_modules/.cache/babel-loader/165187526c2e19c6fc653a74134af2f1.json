{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, normalizeStyle as _normalizeStyle, createElementVNode as _createElementVNode } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", {\n    style: _normalizeStyle({\n      height: \"\".concat($data.contentHeight, \"px\")\n    }),\n    \"class\": \"content_box\",\n    onScroll: _cache[0] || (_cache[0] = function () {\n      return $options.scroll && $options.scroll.apply($options, arguments);\n    })\n  }, [_createCommentVNode(\"这层div是为了把高度撑开，让滚动条出现，height值为所有数据总高\"), _createElementVNode(\"div\", {\n    style: _normalizeStyle({\n      height: \"\".concat($data.itemHeight * $data.listAll.length, \"px\"),\n      position: 'relative'\n    })\n  }, [_createCommentVNode(\"可视区域里所有数据的渲染区域\"), _createElementVNode(\"div\", {\n    style: _normalizeStyle({\n      position: 'absolute',\n      top: \"\".concat($data.top, \"px\")\n    })\n  }, [_createCommentVNode(\"单条数据渲染区域\"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.showList, function (item, index) {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index,\n      \"class\": \"item\"\n    }, _toDisplayString(item), 1\n    /* TEXT */\n    );\n  }), 128\n  /* KEYED_FRAGMENT */\n  ))], 4\n  /* STYLE */\n  )], 4\n  /* STYLE */\n  )], 36\n  /* STYLE, HYDRATE_EVENTS */\n  );\n}","map":{"version":3,"mappings":";;uBACEA,oBAoBM,KApBN,EAoBM;IAnBHC,KAAK;MAAAC,kBAAeC,mBAAf;IAAA,EAmBF;IAlBJ,SAAM,aAkBF;IAjBHC,QAAM;MAAA,OAAEC,6DAAF;IAAA;EAiBH,CApBN,GAKEC,4DACAC,oBAaM,KAbN,EAaM;IAZHN,KAAK;wBAAuBE,mBAAaA,cAAQK,aAA5C;;IAAA;EAYF,CAbN,GAMEF,uCACAC,oBAKM,KALN,EAKM;IALAN,KAAK;MAAAQ;MAAAC,eAAkCP,SAAlC;IAAA;EAKL,CALN,GACEG,oDACAN,oBAEMW,SAFN,EAEM,IAFN,EAEMC,YAFuBT,cAEvB,EAF+B,UAAxBU,IAAwB,EAAlBC,KAAkB,EAAb;yBAAxBd,oBAEM,KAFN,EAEM;MAFkCe,GAAG,EAAED,KAEvC;MAF8C,SAAM;IAEpD,CAFN,mBACKD,KADL,EACS;IAAA;IADT;GAEM,CAFN;;EAAA,GAFF;;EAAA,EAPF;;EAAA,EANF;;EAAA","names":["_createElementBlock","style","height","$data","onScroll","$options","_createCommentVNode","_createElementVNode","length","position","top","_Fragment","_renderList","item","index","key"],"sourceRoot":"","sources":["/Users/arisguy/study/VUE-CLI/src/pages/About/index.vue"],"sourcesContent":["<template>\n  <div\n    :style=\"{ height: `${contentHeight}px` }\"\n    class=\"content_box\"\n    @scroll=\"scroll\"\n  >\n    <!--这层div是为了把高度撑开，让滚动条出现，height值为所有数据总高-->\n    <div\n      :style=\"{\n        height: `${itemHeight * listAll.length}px`,\n        position: 'relative',\n      }\"\n    >\n      <!--可视区域里所有数据的渲染区域-->\n      <div :style=\"{ position: 'absolute', top: `${top}px` }\">\n        <!--单条数据渲染区域-->\n        <div v-for=\"(item, index) in showList\" :key=\"index\" class=\"item\">\n          {{ item }}\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"list\",\n  data () {\n    return {\n      listAll: [],  //所有数据\n      showList: [],  //可视区域显示的数据\n      contentHeight: 500,  //可视区域高度\n      itemHeight: 30,      //每条数据所占高度\n      showNum: 0,  //可是区域显示的最大条数\n      top: 0, //偏移量\n      scrollTop: 0,  //卷起的高度\n      startIndex: 0,  //可视区域第一条数据的索引\n      endIndex: 0,  //可视区域最后一条数据后面那条数据的的索引，因为后面要用slice(start,end)方法取需要的数据，但是slice规定end对应数据不包含在里面\n    }\n  },\n  methods: {\n    //构造10万条数据\n    getList () {\n      for (let i = 0; i < 100000; i++) {\n        this.listAll.push(`我是第${i}条数据呀`)\n      }\n    },\n    //计算可视区域数据\n    getShowList () {\n      this.showNum = Math.ceil(this.contentHeight / this.itemHeight);  //可视区域最多出现的数据条数，值是小数的话往上取整，因为极端情况是第一条和最后一条都只显示一部分\n      this.startIndex = Math.floor(this.scrollTop / this.itemHeight);   //可视区域第一条数据的索引\n      this.endIndex = this.startIndex + this.showNum;   //可视区域最后一条数据的后面那条数据的索引\n      this.showList = this.listAll.slice(this.startIndex, this.endIndex)  //可视区域显示的数据，即最后要渲染的数据。实际的数据索引是从this.startIndex到this.endIndex-1\n      const offsetY = this.scrollTop - (this.scrollTop % this.itemHeight);  //在这需要获得一个可以被itemHeight整除的数来作为item的偏移量，这样随机滑动时第一条数据都是完整显示的\n      this.top = offsetY;\n    },\n    //监听滚动事件，实时计算scrollTop\n    scroll () {\n      this.scrollTop = document.querySelector('.content_box').scrollTop;  //element.scrollTop方法可以获取到卷起的高度\n      this.getShowList();\n    }\n  },\n  mounted () {\n    this.getList();\n    this.scroll();\n  }\n}\n</script>\n\n<style scoped>\n.content_box {\n  overflow: auto; /*只有这行代码写了，内容超出高度才会出现滚动条*/\n  width: 700px;\n  border: 1px solid red;\n}\n/*每条数据的样式*/\n.item {\n  height: 30px;\n  padding: 5px;\n  color: #666;\n  box-sizing: border-box;\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}