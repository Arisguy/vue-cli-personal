{"ast":null,"code":"import \"core-js/modules/es.array.slice.js\";\nexport default {\n  name: \"list\",\n  data: function data() {\n    return {\n      listAll: [],\n      //所有数据\n      showList: [],\n      //可视区域显示的数据\n      contentHeight: 500,\n      //可视区域高度\n      itemHeight: 30,\n      //每条数据所占高度\n      showNum: 0,\n      //可是区域显示的最大条数\n      top: 0,\n      //偏移量\n      scrollTop: 0,\n      //卷起的高度\n      startIndex: 0,\n      //可视区域第一条数据的索引\n      endIndex: 0 //可视区域最后一条数据后面那条数据的的索引，因为后面要用slice(start,end)方法取需要的数据，但是slice规定end对应数据不包含在里面\n\n    };\n  },\n  methods: {\n    //构造10万条数据\n    getList: function getList() {\n      for (var i = 0; i < 100000; i++) {\n        this.listAll.push(\"\\u6211\\u662F\\u7B2C\".concat(i, \"\\u6761\\u6570\\u636E\\u5440\"));\n      }\n    },\n    //计算可视区域数据\n    getShowList: function getShowList() {\n      this.showNum = Math.ceil(this.contentHeight / this.itemHeight); //可视区域最多出现的数据条数，值是小数的话往上取整，因为极端情况是第一条和最后一条都只显示一部分\n\n      this.startIndex = Math.floor(this.scrollTop / this.itemHeight); //可视区域第一条数据的索引\n\n      this.endIndex = this.startIndex + this.showNum; //可视区域最后一条数据的后面那条数据的索引\n\n      this.showList = this.listAll.slice(this.startIndex, this.endIndex); //可视区域显示的数据，即最后要渲染的数据。实际的数据索引是从this.startIndex到this.endIndex-1\n\n      var offsetY = this.scrollTop - this.scrollTop % this.itemHeight; //在这需要获得一个可以被itemHeight整除的数来作为item的偏移量，这样随机滑动时第一条数据都是完整显示的\n\n      this.top = offsetY;\n    },\n    //监听滚动事件，实时计算scrollTop\n    scroll: function scroll() {\n      this.scrollTop = document.querySelector('.content_box').scrollTop; //element.scrollTop方法可以获取到卷起的高度\n\n      this.getShowList();\n    }\n  },\n  mounted: function mounted() {\n    this.getList();\n    this.scroll();\n  }\n};","map":{"version":3,"mappings":";AAyBA,eAAe;EACbA,IAAI,EAAE,MADO;EAEbC,IAFa,kBAEL;IACN,OAAO;MACLC,OAAO,EAAE,EADJ;MACS;MACdC,QAAQ,EAAE,EAFL;MAEU;MACfC,aAAa,EAAE,GAHV;MAGgB;MACrBC,UAAU,EAAE,EAJP;MAIgB;MACrBC,OAAO,EAAE,CALJ;MAKQ;MACbC,GAAG,EAAE,CANA;MAMG;MACRC,SAAS,EAAE,CAPN;MAOU;MACfC,UAAU,EAAE,CARP;MAQW;MAChBC,QAAQ,EAAE,CATL,CASS;;IATT,CAAP;EAWD,CAdY;EAebC,OAAO,EAAE;IACP;IACAC,OAFO,qBAEI;MACT,KAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAI,MAApB,EAA4BA,CAAC,EAA7B,EAAiC;QAC/B,KAAKX,OAAL,CAAaY,IAAb,6BAAwBD,CAAxB;MACF;IACD,CANM;IAOP;IACAE,WARO,yBAQQ;MACb,KAAKT,OAAL,GAAeU,IAAI,CAACC,IAAL,CAAU,KAAKb,aAAL,GAAqB,KAAKC,UAApC,CAAf,CADa,CACoD;;MACjE,KAAKI,UAAL,GAAkBO,IAAI,CAACE,KAAL,CAAW,KAAKV,SAAL,GAAiB,KAAKH,UAAjC,CAAlB,CAFa,CAEqD;;MAClE,KAAKK,QAAL,GAAgB,KAAKD,UAAL,GAAkB,KAAKH,OAAvC,CAHa,CAGqC;;MAClD,KAAKH,QAAL,GAAgB,KAAKD,OAAL,CAAaiB,KAAb,CAAmB,KAAKV,UAAxB,EAAoC,KAAKC,QAAzC,CAAhB,CAJa,CAIuD;;MACpE,IAAMU,OAAM,GAAI,KAAKZ,SAAL,GAAkB,KAAKA,SAAL,GAAiB,KAAKH,UAAxD,CALa,CAKyD;;MACtE,KAAKE,GAAL,GAAWa,OAAX;IACD,CAfM;IAgBP;IACAC,MAjBO,oBAiBG;MACR,KAAKb,SAAL,GAAiBc,QAAQ,CAACC,aAAT,CAAuB,cAAvB,EAAuCf,SAAxD,CADQ,CAC4D;;MACpE,KAAKO,WAAL;IACF;EApBO,CAfI;EAqCbS,OArCa,qBAqCF;IACT,KAAKZ,OAAL;IACA,KAAKS,MAAL;EACF;AAxCa,CAAf","names":["name","data","listAll","showList","contentHeight","itemHeight","showNum","top","scrollTop","startIndex","endIndex","methods","getList","i","push","getShowList","Math","ceil","floor","slice","offsetY","scroll","document","querySelector","mounted"],"sourceRoot":"","sources":["/Users/arisguy/study/VUE-CLI/src/pages/About/index.vue"],"sourcesContent":["<template>\n  <div\n    :style=\"{ height: `${contentHeight}px` }\"\n    class=\"content_box\"\n    @scroll=\"scroll\"\n  >\n    <!--这层div是为了把高度撑开，让滚动条出现，height值为所有数据总高-->\n    <div\n      :style=\"{\n        height: `${itemHeight * listAll.length}px`,\n        position: 'relative',\n      }\"\n    >\n      <!--可视区域里所有数据的渲染区域-->\n      <div :style=\"{ position: 'absolute', top: `${top}px` }\">\n        <!--单条数据渲染区域-->\n        <div v-for=\"(item, index) in showList\" :key=\"index\" class=\"item\">\n          {{ item }}\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"list\",\n  data () {\n    return {\n      listAll: [],  //所有数据\n      showList: [],  //可视区域显示的数据\n      contentHeight: 500,  //可视区域高度\n      itemHeight: 30,      //每条数据所占高度\n      showNum: 0,  //可是区域显示的最大条数\n      top: 0, //偏移量\n      scrollTop: 0,  //卷起的高度\n      startIndex: 0,  //可视区域第一条数据的索引\n      endIndex: 0,  //可视区域最后一条数据后面那条数据的的索引，因为后面要用slice(start,end)方法取需要的数据，但是slice规定end对应数据不包含在里面\n    }\n  },\n  methods: {\n    //构造10万条数据\n    getList () {\n      for (let i = 0; i < 100000; i++) {\n        this.listAll.push(`我是第${i}条数据呀`)\n      }\n    },\n    //计算可视区域数据\n    getShowList () {\n      this.showNum = Math.ceil(this.contentHeight / this.itemHeight);  //可视区域最多出现的数据条数，值是小数的话往上取整，因为极端情况是第一条和最后一条都只显示一部分\n      this.startIndex = Math.floor(this.scrollTop / this.itemHeight);   //可视区域第一条数据的索引\n      this.endIndex = this.startIndex + this.showNum;   //可视区域最后一条数据的后面那条数据的索引\n      this.showList = this.listAll.slice(this.startIndex, this.endIndex)  //可视区域显示的数据，即最后要渲染的数据。实际的数据索引是从this.startIndex到this.endIndex-1\n      const offsetY = this.scrollTop - (this.scrollTop % this.itemHeight);  //在这需要获得一个可以被itemHeight整除的数来作为item的偏移量，这样随机滑动时第一条数据都是完整显示的\n      this.top = offsetY;\n    },\n    //监听滚动事件，实时计算scrollTop\n    scroll () {\n      this.scrollTop = document.querySelector('.content_box').scrollTop;  //element.scrollTop方法可以获取到卷起的高度\n      this.getShowList();\n    }\n  },\n  mounted () {\n    this.getList();\n    this.scroll();\n  }\n}\n</script>\n\n<style scoped>\n.content_box {\n  overflow: auto; /*只有这行代码写了，内容超出高度才会出现滚动条*/\n  width: 700px;\n  border: 1px solid red;\n}\n/*每条数据的样式*/\n.item {\n  height: 30px;\n  padding: 5px;\n  color: #666;\n  box-sizing: border-box;\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}